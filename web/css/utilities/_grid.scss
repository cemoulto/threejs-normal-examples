// Creates a grid with the number of columns that you specifiy. Each column
// will be the same width and combine to completely fill up the container
@mixin make-uniform-columns($columns) {
    @include fluid-container;

    > * {
        @include clear-columns($columns);
        @include padding(null $grid-gutter-width);
        float: left;
        width: #{100/$columns}#{"%"};
    }
}

// Allows you to specify as many columns as you want with custom widths.
// Usage: `@include make-custom-columns(8, 2, 2);` The above example would
// create three columns spanning a 12 column grid - the sum of each column.
// Each column is then divded by the total amount of columns in the grid to
// apply the appropriate percentage
@mixin make-custom-columns($columns...) {
    @include fluid-container;
    $total-columns: 0;

    @each $column in $columns {
        $total-columns: $total-columns + $column;
    }

    @for $i from 1 through length($columns) {
        $column: nth($columns, $i);

        > * {
            @include clear-columns(length($columns));

            &:nth-child(#{length($columns)}n + #{$i}) {
                @include padding(null $grid-gutter-width);
                float: left;
                width: #{$column/$total-columns * 100}#{"%"};
            }
        }
    }
}

// Applied to a the grid parent. Allows the parent to house floated columns
// and offsets the grid gutters with negative left and right margins
@mixin fluid-container {
    @include margin(null (-$grid-gutter-width));
    overflow: hidden;
}

// Applies a `clear: left` to the proper child so that rows are handled
// properly
@mixin clear-columns($total-columns) {
    &:nth-child(#{$total-columns}n + 1) {
        clear: left;
    }

    &:not(:nth-child(#{$total-columns}n + 1)) {
        clear: none;
    }
}
